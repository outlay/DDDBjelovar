/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApplicationError
 */
export interface ApplicationError {
    /**
     * 
     * @type {number}
     * @memberof ApplicationError
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApplicationError
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationError
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationError
     */
    'timestamp'?: string;
    /**
     * 
     * @type {Array<FieldError>}
     * @memberof ApplicationError
     */
    'fieldErrors'?: Array<FieldError>;
}
/**
 * 
 * @export
 * @interface CommunityHouseResponse
 */
export interface CommunityHouseResponse {
    /**
     * 
     * @type {number}
     * @memberof CommunityHouseResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CommunityHouseResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunityHouseResponse
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof CommunityHouseResponse
     */
    'squaring'?: number;
    /**
     * 
     * @type {string}
     * @memberof CommunityHouseResponse
     */
    'category'?: string;
    /**
     * 
     * @type {number}
     * @memberof CommunityHouseResponse
     */
    'cutleryRentAmountPerPerson'?: number;
    /**
     * 
     * @type {number}
     * @memberof CommunityHouseResponse
     */
    'approxNumberOfOccupants'?: number;
    /**
     * 
     * @type {string}
     * @memberof CommunityHouseResponse
     */
    'note'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CommunityHouseResponse
     */
    'active'?: boolean;
    /**
     * 
     * @type {CoordinatesResponse}
     * @memberof CommunityHouseResponse
     */
    'coordinates'?: CoordinatesResponse;
    /**
     * 
     * @type {Array<ImageResponse>}
     * @memberof CommunityHouseResponse
     */
    'images'?: Array<ImageResponse>;
}
/**
 * 
 * @export
 * @interface CoordinatesResponse
 */
export interface CoordinatesResponse {
    /**
     * 
     * @type {number}
     * @memberof CoordinatesResponse
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordinatesResponse
     */
    'longitude'?: number;
}
/**
 * 
 * @export
 * @interface FieldError
 */
export interface FieldError {
    /**
     * 
     * @type {string}
     * @memberof FieldError
     */
    'field'?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ImageResponse
 */
export interface ImageResponse {
    /**
     * 
     * @type {number}
     * @memberof ImageResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageResponse
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface JwtResponse
 */
export interface JwtResponse {
    /**
     * 
     * @type {string}
     * @memberof JwtResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof JwtResponse
     */
    'accessTokenExpires'?: number;
    /**
     * 
     * @type {string}
     * @memberof JwtResponse
     */
    'type'?: string;
    /**
     * 
     * @type {UserResponse}
     * @memberof JwtResponse
     */
    'user'?: UserResponse;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * User\'s email
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string;
    /**
     * User\'s password
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ReservationDetailsResponse
 */
export interface ReservationDetailsResponse {
    /**
     * 
     * @type {number}
     * @memberof ReservationDetailsResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReservationDetailsResponse
     */
    'communityHouseName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ReservationDetailsResponse
     */
    'purposeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReservationDetailsResponse
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReservationDetailsResponse
     */
    'reservationAmountId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReservationDetailsResponse
     */
    'recordId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReservationDetailsResponse
     */
    'bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationDetailsResponse
     */
    'iban'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationDetailsResponse
     */
    'localBoardName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationDetailsResponse
     */
    'issueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationDetailsResponse
     */
    'dateTimeFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationDetailsResponse
     */
    'dateTimeTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationDetailsResponse
     */
    'status'?: ReservationDetailsResponseStatusEnum;
}

export const ReservationDetailsResponseStatusEnum = {
    ZahtjevPoslan: 'ZAHTJEV_POSLAN',
    ZahtjevPotvrden: 'ZAHTJEV_POTVRDEN',
    UgovorNapravljen: 'UGOVOR_NAPRAVLJEN',
    UgovorPotpisanGradonacelnik: 'UGOVOR_POTPISAN_GRADONACELNIK',
    UgovorPotpisanStranka: 'UGOVOR_POTPISAN_STRANKA',
    UgovorPlacen: 'UGOVOR_PLACEN',
    JamcevinaVracena: 'JAMCEVINA_VRACENA',
    ZahtjevOtkazan: 'ZAHTJEV_OTKAZAN'
} as const;

export type ReservationDetailsResponseStatusEnum = typeof ReservationDetailsResponseStatusEnum[keyof typeof ReservationDetailsResponseStatusEnum];

/**
 * 
 * @export
 * @interface ReservationResponse
 */
export interface ReservationResponse {
    /**
     * 
     * @type {number}
     * @memberof ReservationResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReservationResponse
     */
    'communityHouseName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationResponse
     */
    'dateTimeFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationResponse
     */
    'dateTimeTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationResponse
     */
    'status'?: ReservationResponseStatusEnum;
}

export const ReservationResponseStatusEnum = {
    ZahtjevPoslan: 'ZAHTJEV_POSLAN',
    ZahtjevPotvrden: 'ZAHTJEV_POTVRDEN',
    UgovorNapravljen: 'UGOVOR_NAPRAVLJEN',
    UgovorPotpisanGradonacelnik: 'UGOVOR_POTPISAN_GRADONACELNIK',
    UgovorPotpisanStranka: 'UGOVOR_POTPISAN_STRANKA',
    UgovorPlacen: 'UGOVOR_PLACEN',
    JamcevinaVracena: 'JAMCEVINA_VRACENA',
    ZahtjevOtkazan: 'ZAHTJEV_OTKAZAN'
} as const;

export type ReservationResponseStatusEnum = typeof ReservationResponseStatusEnum[keyof typeof ReservationResponseStatusEnum];

/**
 * 
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * User\'s first name
     * @type {string}
     * @memberof SignupRequest
     */
    'firstName': string;
    /**
     * User\'s last name
     * @type {string}
     * @memberof SignupRequest
     */
    'lastName': string;
    /**
     * User\'s email
     * @type {string}
     * @memberof SignupRequest
     */
    'email': string;
    /**
     * User\'s password
     * @type {string}
     * @memberof SignupRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SignupResponse
 */
export interface SignupResponse {
    /**
     * User\'s id
     * @type {number}
     * @memberof SignupResponse
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'role'?: string;
}

/**
 * CommunityHousesApi - axios parameter creator
 * @export
 */
export const CommunityHousesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetches the community house by ID
         * @param {string} id ID of the community house to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommunityHouseByDates: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchCommunityHouseByDates', 'id', id)
            const localVarPath = `/api/v1/community-houses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetches the community house by ID if the house is available in those dates, otherwise returns 400
         * @param {string} id ID of the community house to fetch
         * @param {string} startDate Start date of the reservation
         * @param {string} endDate End date of the reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommunityHouseByDates1: async (id: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchCommunityHouseByDates1', 'id', id)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('fetchCommunityHouseByDates1', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('fetchCommunityHouseByDates1', 'endDate', endDate)
            const localVarPath = `/api/v1/community-houses/{id}/availability`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetches all community houses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommunityHouses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/community-houses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetches all community houses filtered by capacity, start and end date
         * @param {string} startDate Start date of the reservation
         * @param {string} endDate End date of the reservation
         * @param {string} [capacity] Capacity of the community house
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommunityHouses1: async (startDate: string, endDate: string, capacity?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('fetchCommunityHouses1', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('fetchCommunityHouses1', 'endDate', endDate)
            const localVarPath = `/api/v1/community-houses/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (capacity !== undefined) {
                localVarQueryParameter['capacity'] = capacity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommunityHousesApi - functional programming interface
 * @export
 */
export const CommunityHousesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommunityHousesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetches the community house by ID
         * @param {string} id ID of the community house to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCommunityHouseByDates(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunityHouseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCommunityHouseByDates(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunityHousesApi.fetchCommunityHouseByDates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetches the community house by ID if the house is available in those dates, otherwise returns 400
         * @param {string} id ID of the community house to fetch
         * @param {string} startDate Start date of the reservation
         * @param {string} endDate End date of the reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCommunityHouseByDates1(id: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunityHouseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCommunityHouseByDates1(id, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunityHousesApi.fetchCommunityHouseByDates1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetches all community houses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCommunityHouses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommunityHouseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCommunityHouses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunityHousesApi.fetchCommunityHouses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetches all community houses filtered by capacity, start and end date
         * @param {string} startDate Start date of the reservation
         * @param {string} endDate End date of the reservation
         * @param {string} [capacity] Capacity of the community house
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCommunityHouses1(startDate: string, endDate: string, capacity?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommunityHouseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCommunityHouses1(startDate, endDate, capacity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunityHousesApi.fetchCommunityHouses1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommunityHousesApi - factory interface
 * @export
 */
export const CommunityHousesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommunityHousesApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetches the community house by ID
         * @param {string} id ID of the community house to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommunityHouseByDates(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CommunityHouseResponse> {
            return localVarFp.fetchCommunityHouseByDates(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetches the community house by ID if the house is available in those dates, otherwise returns 400
         * @param {string} id ID of the community house to fetch
         * @param {string} startDate Start date of the reservation
         * @param {string} endDate End date of the reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommunityHouseByDates1(id: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): AxiosPromise<CommunityHouseResponse> {
            return localVarFp.fetchCommunityHouseByDates1(id, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetches all community houses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommunityHouses(options?: RawAxiosRequestConfig): AxiosPromise<Array<CommunityHouseResponse>> {
            return localVarFp.fetchCommunityHouses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetches all community houses filtered by capacity, start and end date
         * @param {string} startDate Start date of the reservation
         * @param {string} endDate End date of the reservation
         * @param {string} [capacity] Capacity of the community house
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommunityHouses1(startDate: string, endDate: string, capacity?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CommunityHouseResponse>> {
            return localVarFp.fetchCommunityHouses1(startDate, endDate, capacity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommunityHousesApi - object-oriented interface
 * @export
 * @class CommunityHousesApi
 * @extends {BaseAPI}
 */
export class CommunityHousesApi extends BaseAPI {
    /**
     * 
     * @summary Fetches the community house by ID
     * @param {string} id ID of the community house to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunityHousesApi
     */
    public fetchCommunityHouseByDates(id: string, options?: RawAxiosRequestConfig) {
        return CommunityHousesApiFp(this.configuration).fetchCommunityHouseByDates(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetches the community house by ID if the house is available in those dates, otherwise returns 400
     * @param {string} id ID of the community house to fetch
     * @param {string} startDate Start date of the reservation
     * @param {string} endDate End date of the reservation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunityHousesApi
     */
    public fetchCommunityHouseByDates1(id: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig) {
        return CommunityHousesApiFp(this.configuration).fetchCommunityHouseByDates1(id, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetches all community houses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunityHousesApi
     */
    public fetchCommunityHouses(options?: RawAxiosRequestConfig) {
        return CommunityHousesApiFp(this.configuration).fetchCommunityHouses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetches all community houses filtered by capacity, start and end date
     * @param {string} startDate Start date of the reservation
     * @param {string} endDate End date of the reservation
     * @param {string} [capacity] Capacity of the community house
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunityHousesApi
     */
    public fetchCommunityHouses1(startDate: string, endDate: string, capacity?: string, options?: RawAxiosRequestConfig) {
        return CommunityHousesApiFp(this.configuration).fetchCommunityHouses1(startDate, endDate, capacity, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReservationsApi - axios parameter creator
 * @export
 */
export const ReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetches the reservation details by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReservationById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchReservationById', 'id', id)
            const localVarPath = `/api/v1/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetches the reservations of a specific user by its id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReservationsByUserId: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/reservations/reservations/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationsApi - functional programming interface
 * @export
 */
export const ReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetches the reservation details by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchReservationById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchReservationById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.fetchReservationById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetches the reservations of a specific user by its id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchReservationsByUserId(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReservationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchReservationsByUserId(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.fetchReservationsByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReservationsApi - factory interface
 * @export
 */
export const ReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetches the reservation details by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReservationById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ReservationDetailsResponse> {
            return localVarFp.fetchReservationById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetches the reservations of a specific user by its id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReservationsByUserId(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReservationResponse>> {
            return localVarFp.fetchReservationsByUserId(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReservationsApi - object-oriented interface
 * @export
 * @class ReservationsApi
 * @extends {BaseAPI}
 */
export class ReservationsApi extends BaseAPI {
    /**
     * 
     * @summary Fetches the reservation details by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public fetchReservationById(id: number, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).fetchReservationById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetches the reservations of a specific user by its id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public fetchReservationsByUserId(options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).fetchReservationsByUserId(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Register user
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (signupRequest: SignupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupRequest' is not null or undefined
            assertParamExists('addUser', 'signupRequest', signupRequest)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetches access token / authenticates user
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUser: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('authenticateUser', 'loginRequest', loginRequest)
            const localVarPath = `/api/v1/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Register user
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(signupRequest: SignupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(signupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.addUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetches access token / authenticates user
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateUser(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateUser(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.authenticateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Register user
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(signupRequest: SignupRequest, options?: RawAxiosRequestConfig): AxiosPromise<SignupResponse> {
            return localVarFp.addUser(signupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetches access token / authenticates user
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUser(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<JwtResponse> {
            return localVarFp.authenticateUser(loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Register user
     * @param {SignupRequest} signupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public addUser(signupRequest: SignupRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).addUser(signupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetches access token / authenticates user
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public authenticateUser(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).authenticateUser(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



